
@model DTO.UserDTO
<div class="box-body">
    <div class="form-group">
        <label>User Name</label>
        @Html.TextBoxFor(x => x.Username, new { @class = "form-control", @placeholder = "User Name" })
        @Html.ValidationMessageFor(x => x.Username)
    </div>

    @if (DTO.UserStatic.isAdmin)
    {

    <div class="form-check">
        <input checked="@Model.isAdmin" type="checkbox" value="true" class="form-check-input" name="isAdmin"/>
        <label class="form-check-label">is Admin?</label>
    </div>
    }

    <div class="form-group">
        <label>Password</label>
        @Html.TextBoxFor(x => x.Password, new { @class = "form-control", @placeholder = "Password" })
    </div>

    <div class="form-group">
        @Html.LabelFor(x => x.UserImage)

        <input type="file" name="UserImage" accept="image/gif, image/jpeg, image/png, image/jpg"
               onchange="$('#UserImage')[0].src= window.URL.createObjectURL(this.files[0])" />

        <br />

        @if (Model != null && Model.ImagePath != null)
        {
            <br />
            <img src="~/Areas/Admin/Content/UserImage/@Model.ImagePath" widht="300" height="200" />
        }
        else
        {
            <img widht="300" height="200" id="UserImage" />
        }
    </div>

    <div class="form-group">
        <label>Name</label>
        @Html.TextBoxFor(x => x.Name, new {@class="form-control", @placeholder="Name"})
        @Html.ValidationMessageFor(x => x.Name)
    </div>

    <div class="form-group">
        <label>Email</label>
        @Html.TextBoxFor(x => x.Email, new { @class = "form-control", @placeholder = "E-mail" })
        @Html.ValidationMessageFor(x => x.Email)
    </div>

    <input type="number" hidden name="ID" value="@Model.ID" />

    <div class="card-footer">
        <button class="btn btn-primary" type="submit">Save</button>
    </div>

</div>
